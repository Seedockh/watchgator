openapi: 3.0.0
info:
  title: WatchGator API
  description: Movies / Series fast and reliable search engine
  version: 1.0.0
servers:
  - url: https://watchgator-server.herokuapp.com/api
    description: Main endpoint

path:
  /peoples/all/:
    get:
      summary: Get the {page} (default 1) chunk containing 20 Peoples
      tags: [Peoples]
      responses:
        "200":
          description: List of all Peoples, chunked by pages of 20 Peoples.
          content:
            array:
              schema:
                $ref: '#/components/schemas/PeoplesList'
  /peoples/{id}:
    parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: The People id
    get:
      summary: Get the People with the id {id}
      tags: [Peoples]
      responses:
        "200":
          description: Get the {id} People
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/People'
  /peoples/find:
    post:
      summary: Find Peoples by key
      tags: [Peoples]
      requestBody:
        description: Any People key to search on
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PeopleFind'
      responses:
        "200":
          description: Find Peoples by searching (case-insensitive RegExp) with specified body keys
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PeoplesResponse'

components:
 schemas:
   PeoplesResponse:
     type: object
     properties:
        time: 375,
        total: 1614,
        totalPages: 81,
        page: 1,
        pageResults: 20,
        results:
          type: array
          description: results
          items:
            $ref: '#/components/schemas/People'
            minItems: 1
            maxItems: 20
     example:
       time: 375,
       total: 1614,
       totalPages: 81,
       page: 1,
       pageResults: 20,
       results: [
        {
            _id: "nm0000197",
            firstname: "Jack",
            lastname: "Nicholson",
            picture: "https://m.media-amazon.com/images/M/MV5BMTQ3OTY0ODk0M15BMl5BanBnXkFtZTYwNzE4Njc4._V1_UY209_CR5,0,140,209_AL_.jpg",
            role: "Actor"
        },
        {
            _id: "nm0000329",
            firstname: "Jackie",
            lastname: "Chan",
            picture: "https://m.media-amazon.com/images/M/MV5BMTk4MDM0MDUzM15BMl5BanBnXkFtZTcwOTI4MzU1Mw@@.jpg",
            role: "Actor"
        }
       ]

   PeoplesList:
     type: array
     items:
       $ref: '#/components/schemas/PeoplesChunk'
     uniqueItems: true

   PeoplesChunk:
     type: array
     items:
       $ref: '#/components/schemas/People'
     minItems: 1
     maxItems: 20
     uniqueItems: true

   PeopleFind:
     type: object
     properties:
       key:
         type: string | int | float
       matchCase:
         type: bool
         description: If you want the string to match case. Default at "false"
       fullname:
         type: string
         description: Any string that matches with People names (first and last)
     example:
       fullname: "bru wil"

   People:
     type: object
     properties:
       id:
         type: string
         description: People's ID
       firsname:
         type: string
         description: People's firstname
       lastname:
         type: string
         description: People's lastname
       picture:
         type: string
         description: Photo of the People
       role:
         type: string
         description: People role (Actor, Actress, Director, Writer, Composer)
     example:
       id: "nm0000246"
       firstname: "Bruce"
       lastname: "Willis"
       picture: "https://m.media-amazon.com/images/M/MV5BMjA0MjMzMTE5OF5BMl5BanBnXkFtZTcwMzQ2ODE3Mw@@.jpg"
       role: "Actor"
